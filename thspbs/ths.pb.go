// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ths.proto

/*
Package thspbs is a generated protocol buffer package.

It is generated from these files:
	ths.proto

It has these top-level messages:
	Event
	BaseInfo
	FriendInfo
	GroupInfo
	MemberInfo
	Message
	Messages
	EmptyReq
	HelloReq
	HelloResp
*/
package thspbs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MemberInfo_MemType int32

const (
	MemberInfo_UNKNOWN MemberInfo_MemType = 0
	MemberInfo_FRIEND  MemberInfo_MemType = 1
	MemberInfo_GROUP   MemberInfo_MemType = 2
	MemberInfo_PEER    MemberInfo_MemType = 3
)

var MemberInfo_MemType_name = map[int32]string{
	0: "UNKNOWN",
	1: "FRIEND",
	2: "GROUP",
	3: "PEER",
}
var MemberInfo_MemType_value = map[string]int32{
	"UNKNOWN": 0,
	"FRIEND":  1,
	"GROUP":   2,
	"PEER":    3,
}

func (x MemberInfo_MemType) String() string {
	return proto.EnumName(MemberInfo_MemType_name, int32(x))
}
func (MemberInfo_MemType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type Event struct {
	EventId int64  `protobuf:"varint,1,opt,name=EventId" json:"EventId,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	// int32 NameId = 2;  // TODO
	Args     []string          `protobuf:"bytes,3,rep,name=Args" json:"Args,omitempty"`
	Margs    []string          `protobuf:"bytes,4,rep,name=Margs" json:"Margs,omitempty"`
	Nargs    map[string]string `protobuf:"bytes,5,rep,name=Nargs" json:"Nargs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ErrCode  int32             `protobuf:"varint,6,opt,name=ErrCode" json:"ErrCode,omitempty"`
	ErrMsg   string            `protobuf:"bytes,7,opt,name=ErrMsg" json:"ErrMsg,omitempty"`
	UserCode int64             `protobuf:"varint,8,opt,name=UserCode" json:"UserCode,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *Event) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Event) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Event) GetMargs() []string {
	if m != nil {
		return m.Margs
	}
	return nil
}

func (m *Event) GetNargs() map[string]string {
	if m != nil {
		return m.Nargs
	}
	return nil
}

func (m *Event) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *Event) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *Event) GetUserCode() int64 {
	if m != nil {
		return m.UserCode
	}
	return 0
}

type BaseInfo struct {
	ToxId      string                 `protobuf:"bytes,1,opt,name=ToxId" json:"ToxId,omitempty"`
	Name       string                 `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Stmsg      string                 `protobuf:"bytes,3,opt,name=Stmsg" json:"Stmsg,omitempty"`
	Status     uint32                 `protobuf:"varint,4,opt,name=Status" json:"Status,omitempty"`
	Friends    map[uint32]*FriendInfo `protobuf:"bytes,5,rep,name=Friends" json:"Friends,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Groups     map[uint32]*GroupInfo  `protobuf:"bytes,6,rep,name=Groups" json:"Groups,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ConnStatus int32                  `protobuf:"varint,7,opt,name=ConnStatus" json:"ConnStatus,omitempty"`
	NextBatch  int64                  `protobuf:"varint,8,opt,name=NextBatch" json:"NextBatch,omitempty"`
}

func (m *BaseInfo) Reset()                    { *m = BaseInfo{} }
func (m *BaseInfo) String() string            { return proto.CompactTextString(m) }
func (*BaseInfo) ProtoMessage()               {}
func (*BaseInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BaseInfo) GetToxId() string {
	if m != nil {
		return m.ToxId
	}
	return ""
}

func (m *BaseInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BaseInfo) GetStmsg() string {
	if m != nil {
		return m.Stmsg
	}
	return ""
}

func (m *BaseInfo) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *BaseInfo) GetFriends() map[uint32]*FriendInfo {
	if m != nil {
		return m.Friends
	}
	return nil
}

func (m *BaseInfo) GetGroups() map[uint32]*GroupInfo {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *BaseInfo) GetConnStatus() int32 {
	if m != nil {
		return m.ConnStatus
	}
	return 0
}

func (m *BaseInfo) GetNextBatch() int64 {
	if m != nil {
		return m.NextBatch
	}
	return 0
}

type FriendInfo struct {
	Fnum       uint32 `protobuf:"varint,1,opt,name=Fnum" json:"Fnum,omitempty"`
	Status     uint32 `protobuf:"varint,2,opt,name=Status" json:"Status,omitempty"`
	Pubkey     string `protobuf:"bytes,3,opt,name=Pubkey" json:"Pubkey,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=Name" json:"Name,omitempty"`
	Stmsg      string `protobuf:"bytes,5,opt,name=Stmsg" json:"Stmsg,omitempty"`
	Avatar     string `protobuf:"bytes,6,opt,name=Avatar" json:"Avatar,omitempty"`
	Seen       uint64 `protobuf:"varint,7,opt,name=Seen" json:"Seen,omitempty"`
	ConnStatus int32  `protobuf:"varint,8,opt,name=ConnStatus" json:"ConnStatus,omitempty"`
}

func (m *FriendInfo) Reset()                    { *m = FriendInfo{} }
func (m *FriendInfo) String() string            { return proto.CompactTextString(m) }
func (*FriendInfo) ProtoMessage()               {}
func (*FriendInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FriendInfo) GetFnum() uint32 {
	if m != nil {
		return m.Fnum
	}
	return 0
}

func (m *FriendInfo) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *FriendInfo) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *FriendInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FriendInfo) GetStmsg() string {
	if m != nil {
		return m.Stmsg
	}
	return ""
}

func (m *FriendInfo) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *FriendInfo) GetSeen() uint64 {
	if m != nil {
		return m.Seen
	}
	return 0
}

func (m *FriendInfo) GetConnStatus() int32 {
	if m != nil {
		return m.ConnStatus
	}
	return 0
}

type GroupInfo struct {
	Gnum    uint32                 `protobuf:"varint,1,opt,name=Gnum" json:"Gnum,omitempty"`
	Mtype   uint32                 `protobuf:"varint,2,opt,name=Mtype" json:"Mtype,omitempty"`
	GroupId string                 `protobuf:"bytes,3,opt,name=GroupId" json:"GroupId,omitempty"`
	Title   string                 `protobuf:"bytes,4,opt,name=Title" json:"Title,omitempty"`
	Stmsg   string                 `protobuf:"bytes,5,opt,name=Stmsg" json:"Stmsg,omitempty"`
	Ours    bool                   `protobuf:"varint,6,opt,name=Ours" json:"Ours,omitempty"`
	Members map[uint32]*MemberInfo `protobuf:"bytes,7,rep,name=Members" json:"Members,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GroupInfo) Reset()                    { *m = GroupInfo{} }
func (m *GroupInfo) String() string            { return proto.CompactTextString(m) }
func (*GroupInfo) ProtoMessage()               {}
func (*GroupInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GroupInfo) GetGnum() uint32 {
	if m != nil {
		return m.Gnum
	}
	return 0
}

func (m *GroupInfo) GetMtype() uint32 {
	if m != nil {
		return m.Mtype
	}
	return 0
}

func (m *GroupInfo) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *GroupInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GroupInfo) GetStmsg() string {
	if m != nil {
		return m.Stmsg
	}
	return ""
}

func (m *GroupInfo) GetOurs() bool {
	if m != nil {
		return m.Ours
	}
	return false
}

func (m *GroupInfo) GetMembers() map[uint32]*MemberInfo {
	if m != nil {
		return m.Members
	}
	return nil
}

// = ContactInfo
// 可用于friend,group,peer
type MemberInfo struct {
	Pnum   uint32             `protobuf:"varint,1,opt,name=Pnum" json:"Pnum,omitempty"`
	Pubkey string             `protobuf:"bytes,2,opt,name=Pubkey" json:"Pubkey,omitempty"`
	Name   string             `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Mtype  MemberInfo_MemType `protobuf:"varint,4,opt,name=Mtype,enum=thspbs.MemberInfo_MemType" json:"Mtype,omitempty"`
}

func (m *MemberInfo) Reset()                    { *m = MemberInfo{} }
func (m *MemberInfo) String() string            { return proto.CompactTextString(m) }
func (*MemberInfo) ProtoMessage()               {}
func (*MemberInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MemberInfo) GetPnum() uint32 {
	if m != nil {
		return m.Pnum
	}
	return 0
}

func (m *MemberInfo) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *MemberInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MemberInfo) GetMtype() MemberInfo_MemType {
	if m != nil {
		return m.Mtype
	}
	return MemberInfo_UNKNOWN
}

type Message struct {
	MsgId   uint64      `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
	Content string      `protobuf:"bytes,2,opt,name=Content" json:"Content,omitempty"`
	Peer    *MemberInfo `protobuf:"bytes,3,opt,name=Peer" json:"Peer,omitempty"`
	Created uint64      `protobuf:"varint,4,opt,name=Created" json:"Created,omitempty"`
	Updated uint64      `protobuf:"varint,5,opt,name=Updated" json:"Updated,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Message) GetMsgId() uint64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *Message) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Message) GetPeer() *MemberInfo {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *Message) GetCreated() uint64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Message) GetUpdated() uint64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

type Messages struct {
	Msgs []*Message `protobuf:"bytes,1,rep,name=Msgs" json:"Msgs,omitempty"`
}

func (m *Messages) Reset()                    { *m = Messages{} }
func (m *Messages) String() string            { return proto.CompactTextString(m) }
func (*Messages) ProtoMessage()               {}
func (*Messages) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Messages) GetMsgs() []*Message {
	if m != nil {
		return m.Msgs
	}
	return nil
}

type EmptyReq struct {
}

func (m *EmptyReq) Reset()                    { *m = EmptyReq{} }
func (m *EmptyReq) String() string            { return proto.CompactTextString(m) }
func (*EmptyReq) ProtoMessage()               {}
func (*EmptyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type HelloReq struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty"`
}

func (m *HelloReq) Reset()                    { *m = HelloReq{} }
func (m *HelloReq) String() string            { return proto.CompactTextString(m) }
func (*HelloReq) ProtoMessage()               {}
func (*HelloReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *HelloReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HelloReq) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type HelloResp struct {
	Code   int32 `protobuf:"varint,1,opt,name=Code" json:"Code,omitempty"`
	Status int64 `protobuf:"varint,2,opt,name=Status" json:"Status,omitempty"`
}

func (m *HelloResp) Reset()                    { *m = HelloResp{} }
func (m *HelloResp) String() string            { return proto.CompactTextString(m) }
func (*HelloResp) ProtoMessage()               {}
func (*HelloResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *HelloResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *HelloResp) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*Event)(nil), "thspbs.Event")
	proto.RegisterType((*BaseInfo)(nil), "thspbs.BaseInfo")
	proto.RegisterType((*FriendInfo)(nil), "thspbs.FriendInfo")
	proto.RegisterType((*GroupInfo)(nil), "thspbs.GroupInfo")
	proto.RegisterType((*MemberInfo)(nil), "thspbs.MemberInfo")
	proto.RegisterType((*Message)(nil), "thspbs.Message")
	proto.RegisterType((*Messages)(nil), "thspbs.Messages")
	proto.RegisterType((*EmptyReq)(nil), "thspbs.EmptyReq")
	proto.RegisterType((*HelloReq)(nil), "thspbs.HelloReq")
	proto.RegisterType((*HelloResp)(nil), "thspbs.HelloResp")
	proto.RegisterEnum("thspbs.MemberInfo_MemType", MemberInfo_MemType_name, MemberInfo_MemType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Toxhs service

type ToxhsClient interface {
	PollCallback(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (Toxhs_PollCallbackClient, error)
	GetBaseInfo(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*BaseInfo, error)
	RmtCall(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	Ping(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyReq, error)
}

type toxhsClient struct {
	cc *grpc.ClientConn
}

func NewToxhsClient(cc *grpc.ClientConn) ToxhsClient {
	return &toxhsClient{cc}
}

func (c *toxhsClient) PollCallback(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (Toxhs_PollCallbackClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Toxhs_serviceDesc.Streams[0], c.cc, "/thspbs.Toxhs/PollCallback", opts...)
	if err != nil {
		return nil, err
	}
	x := &toxhsPollCallbackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Toxhs_PollCallbackClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type toxhsPollCallbackClient struct {
	grpc.ClientStream
}

func (x *toxhsPollCallbackClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *toxhsClient) GetBaseInfo(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*BaseInfo, error) {
	out := new(BaseInfo)
	err := grpc.Invoke(ctx, "/thspbs.Toxhs/GetBaseInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toxhsClient) RmtCall(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := grpc.Invoke(ctx, "/thspbs.Toxhs/RmtCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toxhsClient) Ping(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyReq, error) {
	out := new(EmptyReq)
	err := grpc.Invoke(ctx, "/thspbs.Toxhs/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Toxhs service

type ToxhsServer interface {
	PollCallback(*EmptyReq, Toxhs_PollCallbackServer) error
	GetBaseInfo(context.Context, *EmptyReq) (*BaseInfo, error)
	RmtCall(context.Context, *Event) (*Event, error)
	Ping(context.Context, *EmptyReq) (*EmptyReq, error)
}

func RegisterToxhsServer(s *grpc.Server, srv ToxhsServer) {
	s.RegisterService(&_Toxhs_serviceDesc, srv)
}

func _Toxhs_PollCallback_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ToxhsServer).PollCallback(m, &toxhsPollCallbackServer{stream})
}

type Toxhs_PollCallbackServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type toxhsPollCallbackServer struct {
	grpc.ServerStream
}

func (x *toxhsPollCallbackServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Toxhs_GetBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToxhsServer).GetBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thspbs.Toxhs/GetBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToxhsServer).GetBaseInfo(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Toxhs_RmtCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToxhsServer).RmtCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thspbs.Toxhs/RmtCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToxhsServer).RmtCall(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Toxhs_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToxhsServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thspbs.Toxhs/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToxhsServer).Ping(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Toxhs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "thspbs.Toxhs",
	HandlerType: (*ToxhsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBaseInfo",
			Handler:    _Toxhs_GetBaseInfo_Handler,
		},
		{
			MethodName: "RmtCall",
			Handler:    _Toxhs_RmtCall_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Toxhs_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PollCallback",
			Handler:       _Toxhs_PollCallback_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ths.proto",
}

// Client API for Greeter service

type GreeterClient interface {
	SayHello(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*HelloReq, error)
	// 测试带参数的hello
	SayHellox(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloReq, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*HelloReq, error) {
	out := new(HelloReq)
	err := grpc.Invoke(ctx, "/thspbs.Greeter/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SayHellox(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloReq, error) {
	out := new(HelloReq)
	err := grpc.Invoke(ctx, "/thspbs.Greeter/SayHellox", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeter service

type GreeterServer interface {
	SayHello(context.Context, *EmptyReq) (*HelloReq, error)
	// 测试带参数的hello
	SayHellox(context.Context, *HelloReq) (*HelloReq, error)
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thspbs.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayHellox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHellox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thspbs.Greeter/SayHellox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHellox(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "thspbs.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
		{
			MethodName: "SayHellox",
			Handler:    _Greeter_SayHellox_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ths.proto",
}

func init() { proto.RegisterFile("ths.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 862 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x2e, 0xc5, 0x1f, 0x91, 0xa3, 0xb8, 0x65, 0x17, 0x41, 0x40, 0x08, 0x69, 0x20, 0xb0, 0x40,
	0x23, 0xf4, 0xc0, 0x38, 0x6a, 0x01, 0x1b, 0xbd, 0x25, 0xae, 0xec, 0x1a, 0xad, 0x68, 0x62, 0x1d,
	0xa3, 0x67, 0x2a, 0xda, 0xca, 0x6e, 0x28, 0x92, 0xe1, 0xae, 0x0c, 0xeb, 0x41, 0x8a, 0xa2, 0x0f,
	0xd1, 0x73, 0xef, 0x3d, 0xf4, 0xb9, 0x8a, 0x9d, 0xdd, 0x95, 0xa8, 0x9f, 0x1a, 0xe8, 0x6d, 0xbe,
	0x99, 0x9d, 0xd9, 0x99, 0xef, 0xdb, 0x1f, 0x08, 0xc4, 0x2d, 0x4f, 0xea, 0xa6, 0x12, 0x15, 0xf1,
	0xc4, 0x2d, 0xaf, 0xa7, 0x3c, 0xfe, 0xbd, 0x03, 0xee, 0xf8, 0x9e, 0x95, 0x82, 0x44, 0xd0, 0x45,
	0xe3, 0x72, 0x16, 0x59, 0x03, 0x6b, 0x68, 0x53, 0x03, 0x09, 0x01, 0x27, 0xcd, 0x17, 0x2c, 0xea,
	0x0c, 0xac, 0x61, 0x40, 0xd1, 0x96, 0xbe, 0x37, 0xcd, 0x9c, 0x47, 0xf6, 0xc0, 0x96, 0x3e, 0x69,
	0x93, 0xa7, 0xe0, 0x4e, 0x72, 0xe9, 0x74, 0xd0, 0xa9, 0x00, 0x49, 0xc0, 0x4d, 0xd1, 0xeb, 0x0e,
	0xec, 0x61, 0x6f, 0x14, 0x25, 0x6a, 0xe7, 0x04, 0xab, 0x27, 0x18, 0x1a, 0x97, 0xa2, 0x59, 0x51,
	0xb5, 0x0c, 0xfb, 0x68, 0x9a, 0xb3, 0x6a, 0xc6, 0x22, 0x6f, 0x60, 0x0d, 0x5d, 0x6a, 0x20, 0x79,
	0x06, 0xde, 0xb8, 0x69, 0x26, 0x7c, 0x1e, 0x75, 0xb1, 0x13, 0x8d, 0x48, 0x1f, 0xfc, 0x1b, 0xce,
	0x54, 0x8a, 0x8f, 0xad, 0xaf, 0x71, 0xff, 0x14, 0x60, 0xb3, 0x05, 0x09, 0xc1, 0xfe, 0xc0, 0x56,
	0x38, 0x5f, 0x40, 0xa5, 0x29, 0x7b, 0xbe, 0xcf, 0x8b, 0xa5, 0x19, 0x4e, 0x81, 0xef, 0x3a, 0xa7,
	0x56, 0xfc, 0xa7, 0x0d, 0xfe, 0xdb, 0x9c, 0xb3, 0xcb, 0xf2, 0x97, 0x4a, 0x2e, 0x7b, 0x57, 0x3d,
	0x68, 0x6a, 0x02, 0xaa, 0xc0, 0x41, 0x62, 0x9e, 0x82, 0x7b, 0x2d, 0x16, 0x7c, 0x1e, 0xd9, 0x6a,
	0x25, 0x02, 0xd9, 0xfa, 0xb5, 0xc8, 0xc5, 0x52, 0x72, 0x63, 0x0d, 0x8f, 0xa8, 0x46, 0xe4, 0x04,
	0xba, 0xe7, 0xcd, 0x1d, 0x2b, 0x67, 0x86, 0x9e, 0x2f, 0x0c, 0x3d, 0x66, 0xeb, 0x44, 0xc7, 0x15,
	0x47, 0x66, 0x35, 0xf9, 0x16, 0xbc, 0x8b, 0xa6, 0x5a, 0xd6, 0x3c, 0xf2, 0x30, 0xef, 0xf9, 0x5e,
	0x9e, 0x0a, 0xab, 0x34, 0xbd, 0x96, 0xbc, 0x00, 0x38, 0xab, 0xca, 0x52, 0xb7, 0xd2, 0x45, 0x7a,
	0x5b, 0x1e, 0xf2, 0x1c, 0x82, 0x94, 0x3d, 0x88, 0xb7, 0xb9, 0x78, 0x7f, 0xab, 0xa9, 0xdc, 0x38,
	0xfa, 0x29, 0x3c, 0x69, 0x37, 0xd3, 0x66, 0xf3, 0x48, 0xb1, 0x39, 0x6c, 0xb3, 0xd9, 0x1b, 0x11,
	0xd3, 0x94, 0x4a, 0x93, 0x6d, 0xb5, 0x18, 0xee, 0xff, 0x04, 0xbd, 0x56, 0x93, 0x07, 0xca, 0xbd,
	0xdc, 0x2e, 0xf7, 0xb9, 0x29, 0x87, 0x59, 0x3b, 0xd5, 0xe2, 0x7f, 0x2c, 0x80, 0xcd, 0x3e, 0x52,
	0x9b, 0xf3, 0x72, 0xb9, 0xd0, 0xe5, 0xd0, 0x6e, 0xa9, 0xd0, 0xd9, 0x52, 0xe1, 0x19, 0x78, 0xd9,
	0x72, 0x2a, 0x37, 0x57, 0xa2, 0x69, 0xb4, 0xd6, 0xd7, 0x39, 0xa4, 0xaf, 0xbb, 0xa3, 0xef, 0x9b,
	0xfb, 0x5c, 0xe4, 0x0d, 0x9e, 0xd9, 0x80, 0x6a, 0x24, 0x2b, 0x5c, 0x33, 0x56, 0x22, 0xd5, 0x0e,
	0x45, 0x7b, 0x47, 0x04, 0x7f, 0x57, 0x84, 0xf8, 0x8f, 0x0e, 0x04, 0xeb, 0x09, 0x65, 0x85, 0x8b,
	0xd6, 0x1c, 0xd2, 0xc6, 0x8b, 0x26, 0x56, 0x35, 0xd3, 0x63, 0x28, 0x20, 0x2f, 0x8e, 0x4a, 0x9b,
	0xe9, 0x31, 0x0c, 0xc4, 0xd3, 0x7b, 0x27, 0x0a, 0x33, 0x88, 0x02, 0xff, 0x31, 0x09, 0x01, 0xe7,
	0x6a, 0xd9, 0x70, 0x9c, 0xc3, 0xa7, 0x68, 0x93, 0x53, 0xe8, 0x4e, 0xd8, 0x62, 0xca, 0x1a, 0x79,
	0x66, 0xe4, 0x69, 0x7b, 0xb1, 0xa7, 0x44, 0xa2, 0x17, 0xe8, 0x63, 0xaa, 0x91, 0x3c, 0x32, 0xed,
	0xc0, 0xff, 0x38, 0x32, 0x2a, 0x6d, 0x57, 0xe4, 0xbf, 0x2c, 0x80, 0x4d, 0x44, 0x36, 0x9b, 0xb5,
	0xc8, 0xc9, 0xb4, 0xc8, 0x5a, 0xcc, 0xce, 0x41, 0x31, 0xed, 0x96, 0x98, 0xc7, 0x86, 0x48, 0x49,
	0xcc, 0xa7, 0xa3, 0xfe, 0xfe, 0xe6, 0xd2, 0x7c, 0xb7, 0xaa, 0x99, 0x26, 0x39, 0x3e, 0x41, 0x2a,
	0xa4, 0x87, 0xf4, 0xa0, 0x7b, 0x93, 0xfe, 0x98, 0x5e, 0xfd, 0x9c, 0x86, 0x9f, 0x10, 0x00, 0xef,
	0x9c, 0x5e, 0x8e, 0xd3, 0xef, 0x43, 0x8b, 0x04, 0xe0, 0x5e, 0xd0, 0xab, 0x9b, 0x2c, 0xec, 0x10,
	0x1f, 0x9c, 0x6c, 0x3c, 0xa6, 0xa1, 0x1d, 0xff, 0x66, 0xc9, 0x4c, 0xce, 0xf3, 0x39, 0x32, 0x3f,
	0xe1, 0x73, 0xfd, 0x9a, 0x38, 0x54, 0x01, 0xa9, 0xdf, 0x59, 0x55, 0x0a, 0x56, 0x0a, 0xdd, 0xb9,
	0x81, 0xe4, 0x2b, 0x70, 0x32, 0xc6, 0x1a, 0x6c, 0xfd, 0x30, 0x45, 0x18, 0xc7, 0x0a, 0x0d, 0xcb,
	0x05, 0x9b, 0xe1, 0x40, 0x0e, 0x35, 0x50, 0x46, 0x6e, 0xea, 0x19, 0x46, 0x5c, 0x15, 0xd1, 0x30,
	0x7e, 0x05, 0xbe, 0x6e, 0x8b, 0x93, 0x2f, 0xc1, 0x99, 0xf0, 0x39, 0x8f, 0x2c, 0x14, 0xf9, 0xb3,
	0xcd, 0x3e, 0x18, 0xa7, 0x18, 0x8c, 0x01, 0xfc, 0xf1, 0xa2, 0x16, 0x2b, 0xca, 0x3e, 0xc6, 0xc7,
	0xe0, 0xff, 0xc0, 0x8a, 0xa2, 0xa2, 0xec, 0xe3, 0x9a, 0x5f, 0xab, 0xc5, 0x6f, 0x08, 0xb6, 0x7c,
	0xae, 0xd5, 0x38, 0xd2, 0x8c, 0x4f, 0x20, 0xd0, 0x19, 0xbc, 0x96, 0x29, 0xf8, 0x68, 0x5b, 0x78,
	0x07, 0x1c, 0xf3, 0xc8, 0xb7, 0xee, 0xa8, 0x6d, 0xee, 0xe8, 0xe8, 0x6f, 0x0b, 0x9f, 0xe0, 0x5b,
	0x4e, 0x5e, 0xc3, 0x93, 0xac, 0x2a, 0x8a, 0xb3, 0xbc, 0x28, 0xa6, 0xf9, 0xfb, 0x0f, 0x24, 0x5c,
	0xff, 0x28, 0xba, 0xad, 0xfe, 0xd1, 0xd6, 0x1f, 0x73, 0x6c, 0x91, 0xd7, 0xd0, 0xbb, 0x60, 0x62,
	0xfd, 0x9a, 0xef, 0x67, 0x84, 0xbb, 0xcf, 0x27, 0x79, 0x09, 0x5d, 0xba, 0x10, 0x72, 0x13, 0xb2,
	0x5d, 0x6e, 0xa7, 0x3a, 0xf9, 0x1a, 0x9c, 0xec, 0xae, 0x9c, 0x3f, 0x56, 0xd4, 0x78, 0x46, 0xbf,
	0xca, 0x2b, 0xca, 0x98, 0x60, 0x0d, 0x49, 0xc0, 0xbf, 0xce, 0x57, 0xc8, 0xc5, 0x63, 0xa9, 0x6b,
	0x7a, 0x5f, 0x41, 0x60, 0xd6, 0x3f, 0x90, 0xbd, 0xf0, 0x7e, 0xc2, 0xd4, 0xc3, 0x8f, 0xfe, 0x9b,
	0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x7b, 0x28, 0x36, 0xf5, 0x07, 0x00, 0x00,
}
